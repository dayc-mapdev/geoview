{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport {\r\n  TypeWindow,\r\n  TypeJsonArray,\r\n  TypeGeoviewLayerConfig,\r\n  TypeGeoviewLayerType,\r\n  SelectChangeEvent,\r\n  snackbarMessagePayload,\r\n  ButtonPropsLayerPanel,\r\n  TypeListOfLayerEntryConfig,\r\n  TypeJsonObject,\r\n} from 'geoview-core';\r\n\r\ntype Event = { target: { value: string } };\r\n\r\ninterface Props {\r\n  mapId: string;\r\n  setAddLayerVisible: (isVisible: boolean) => void;\r\n}\r\n\r\ntype EsriOptions = {\r\n  err: string;\r\n  capability: string;\r\n};\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n\r\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES, GEOCORE } = api.layerTypes;\r\n  const { useState } = react;\r\n  const { Select, Stepper, TextField, Button, ButtonGroup, Autocomplete, CircularProgressBase, Box } = ui.elements;\r\n\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [layerURL, setLayerURL] = useState('');\r\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\r\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\r\n  const [layerName, setLayerName] = useState('');\r\n  const [layerEntries, setLayerEntries] = useState<TypeListOfLayerEntryConfig>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const sxClasses = {\r\n    buttonGroup: {\r\n      paddingTop: 12,\r\n      gap: 6,\r\n    },\r\n  };\r\n\r\n  const isMultiple = () => layerType === ESRI_DYNAMIC || layerType === WMS || layerType === WFS;\r\n\r\n  /**\r\n   * List of layer types and labels\r\n   */\r\n  const layerOptions = [\r\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\r\n    [ESRI_FEATURE, 'ESRI Feature Service'],\r\n    [GEOJSON, 'GeoJSON'],\r\n    [WMS, 'OGC Web Map Service (WMS)'],\r\n    [WFS, 'OGC Web Feature Service (WFS)'],\r\n    [OGC_FEATURE, 'OGC API Features'],\r\n    [XYZ_TILES, 'XYZ Raster Tiles'],\r\n    [GEOCORE, 'GeoCore'],\r\n  ];\r\n\r\n  /**\r\n   * Returns the appropriate error config for ESRI layer types\r\n   *\r\n   * @param type one of esriDynamic or esriFeature\r\n   * @returns {EsriOptions} an error configuration object for populating dialogues\r\n   */\r\n  const esriOptions = (type: string): EsriOptions => {\r\n    switch (type) {\r\n      case ESRI_DYNAMIC:\r\n        return { err: 'ESRI Map', capability: 'Map' };\r\n      case ESRI_FEATURE:\r\n        return { err: 'ESRI Feature', capability: 'Query' };\r\n      default:\r\n        return { err: '', capability: '' };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Emits an error dialogue when a text field is empty\r\n   *\r\n   * @param textField label for the TextField input that cannot be empty\r\n   */\r\n  const emitErrorEmpty = (textField: string) => {\r\n    setIsLoading(false);\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${textField} cannot be empty`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when the URL does not support the selected service type\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   */\r\n  const emitErrorServer = (serviceName: string) => {\r\n    setIsLoading(false);\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `URL is not a valid ${serviceName} Server`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when a service does not support the current map projection\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   * @param proj current map projection\r\n   */\r\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\r\n    setIsLoading(false);\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WMS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wmsValidation = async (): Promise<boolean> => {\r\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\r\n    let supportedProj: string[] = [];\r\n    try {\r\n      const wms = await api.geoUtilities.getWMSServiceMetadata(layerURL, '');\r\n      supportedProj = wms.Capability.Layer.CRS as string[];\r\n      if (!supportedProj.includes(proj)) throw new Error('proj');\r\n      const layers = (wms.Capability.Layer.Layer as TypeJsonArray).map((aLayer) => [aLayer.Name, aLayer.Title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else {\r\n        setLayerList(layers);\r\n      }\r\n    } catch (err) {\r\n      if ((err as Error).message === 'proj') {\r\n        emitErrorProj('WMS', proj, supportedProj);\r\n      } else {\r\n        emitErrorServer('WMS');\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WFS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wfsValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\r\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\r\n        (aFeatureType.Name['#text'] as string).split(':')[1] as TypeJsonObject,\r\n        aFeatureType.Title['#text'],\r\n      ]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else {\r\n        setLayerList(layers);\r\n      }\r\n    } catch (err) {\r\n      emitErrorServer('WFS');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid OGC API.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const ogcFeatureValidation = async (): Promise<boolean> => {\r\n    const keys = ['collections', 'links'];\r\n    try {\r\n      const response = await fetch(`${layerURL}/collections?f=json`);\r\n      const json = await response.json();\r\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\r\n      if (!isValid) throw new Error('err');\r\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else {\r\n        setLayerList(layers);\r\n      }\r\n    } catch (err) {\r\n      emitErrorServer('OGC API Feature');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid Geocore UUID.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const geocoreValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const isValid = layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32;\r\n      if (!isValid) throw new Error('err');\r\n      setLayerName('');\r\n      setLayerEntries([\r\n        {\r\n          layerId: layerURL,\r\n        },\r\n      ]);\r\n    } catch (err) {\r\n      emitErrorServer('GeoCore UUID');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const esriValidation = async (type: string): Promise<boolean> => {\r\n    try {\r\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\r\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\r\n        if ('layers' in esri) {\r\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\r\n          if (layers.length === 1) {\r\n            setLayerName(layers[0][1] as string);\r\n            setLayerEntries([\r\n              {\r\n                layerId: layers[0][0] as string,\r\n              },\r\n            ]);\r\n          } else {\r\n            setLayerList(layers);\r\n          }\r\n        } else {\r\n          setLayerName(esri.name as string);\r\n          setLayerEntries([\r\n            {\r\n              layerId: esri.id as string,\r\n            },\r\n          ]);\r\n        }\r\n      } else {\r\n        throw new Error('err');\r\n      }\r\n    } catch (err) {\r\n      emitErrorServer(esriOptions(type).err);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\r\n   *\r\n   * @returns {boolean} True if layer passes validation\r\n   */\r\n  const xyzValidation = (): boolean => {\r\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\r\n    const tiles = ['{x}', '{y}', '{z}'];\r\n    for (let i = 0; i < tiles.length; i += 1) {\r\n      if (!layerURL.includes(tiles[i])) {\r\n        emitErrorServer('XYZ Tile');\r\n        return false;\r\n      }\r\n    }\r\n    if (proj !== 'EPSG:3857') {\r\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\r\n      return false;\r\n    }\r\n    const dataAccessPath = layerURL;\r\n    setLayerName('');\r\n    setLayerEntries([\r\n      {\r\n        layerId: layerURL,\r\n        source: {\r\n          dataAccessPath: {\r\n            en: dataAccessPath,\r\n            fr: dataAccessPath,\r\n          },\r\n        },\r\n      },\r\n    ]);\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const geoJSONValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(layerURL);\r\n      const json = await response.json();\r\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) {\r\n        throw new Error('err');\r\n      }\r\n      const layerId = layerURL.split('/').pop() as string;\r\n      const dataAccessPath = layerURL.replace(layerId, '');\r\n      setLayerName(layerId);\r\n      setLayerEntries([\r\n        {\r\n          layerId,\r\n          source: {\r\n            dataAccessPath: {\r\n              en: dataAccessPath,\r\n              fr: dataAccessPath,\r\n            },\r\n          },\r\n        },\r\n      ]);\r\n    } catch (err) {\r\n      emitErrorServer('GeoJSON');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Attempt to determine the layer type based on the URL format\r\n   */\r\n  const bestGuessLayerType = () => {\r\n    const layerTokens = layerURL.toUpperCase().split('/');\r\n    const layerId = parseInt(layerTokens[layerTokens.length - 1], 10);\r\n    if (layerURL.toUpperCase().endsWith('MAPSERVER') || layerURL.toUpperCase().endsWith('MAPSERVER/')) {\r\n      setLayerType(ESRI_DYNAMIC);\r\n    } else if (\r\n      layerURL.toUpperCase().indexOf('FEATURESERVER') !== -1 ||\r\n      (layerURL.toUpperCase().indexOf('MAPSERVER') !== -1 && !Number.isNaN(layerId))\r\n    ) {\r\n      setLayerType(ESRI_FEATURE);\r\n    } else if (layerTokens.indexOf('WFS') !== -1) {\r\n      setLayerType(WFS);\r\n    } else if (layerURL.toUpperCase().endsWith('.JSON') || layerURL.toUpperCase().endsWith('.GEOJSON')) {\r\n      setLayerType(GEOJSON);\r\n    } else if (layerURL.toUpperCase().indexOf('{Z}/{X}/{Y}') !== -1 || layerURL.toUpperCase().indexOf('{Z}/{Y}/{X}') !== -1) {\r\n      setLayerType(XYZ_TILES);\r\n    } else if (layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32) {\r\n      setLayerType(GEOCORE);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep1 = () => {\r\n    let valid = true;\r\n    if (layerURL.trim() === '') {\r\n      valid = false;\r\n      emitErrorEmpty('URL');\r\n    }\r\n    if (valid) {\r\n      bestGuessLayerType();\r\n      setActiveStep(1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep2 = async () => {\r\n    setIsLoading(true);\r\n    let valid = true;\r\n    if (layerType === undefined) {\r\n      valid = false;\r\n      setIsLoading(false);\r\n      emitErrorEmpty('Service Type');\r\n    } else if (layerType === WMS) valid = await wmsValidation();\r\n    else if (layerType === WFS) valid = await wfsValidation();\r\n    else if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\r\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\r\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\r\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\r\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\r\n    else if (layerType === GEOCORE) valid = await geocoreValidation();\r\n    if (valid) {\r\n      setIsLoading(false);\r\n      setActiveStep(2);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStep3 = () => {\r\n    let valid = true;\r\n    if (layerEntries.length === 0) {\r\n      valid = false;\r\n      emitErrorEmpty('Layer');\r\n    }\r\n    if (valid) setActiveStep(3);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStepLast = () => {\r\n    setIsLoading(true);\r\n    const geoviewLayerId = api.generateId();\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\r\n      () => {\r\n        api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\r\n        setIsLoading(false);\r\n        setAddLayerVisible(false);\r\n      },\r\n      mapId,\r\n      geoviewLayerId\r\n    );\r\n\r\n    let valid = true;\r\n    const name = layerName;\r\n    let url = layerURL;\r\n    if (layerType === ESRI_DYNAMIC || layerType === ESRI_FEATURE) {\r\n      url = api.geoUtilities.getMapServerUrl(layerURL);\r\n    }\r\n\r\n    if (layerName === '') {\r\n      valid = false;\r\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\r\n    }\r\n    const layerConfig: TypeGeoviewLayerConfig = {\r\n      geoviewLayerId,\r\n      geoviewLayerName: {\r\n        en: name,\r\n        fr: name,\r\n      },\r\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\r\n      metadataAccessPath: {\r\n        en: url,\r\n        fr: url,\r\n      },\r\n      listOfLayerEntryConfig: layerEntries as TypeListOfLayerEntryConfig,\r\n    };\r\n\r\n    if (layerType === GEOJSON || layerType === XYZ_TILES) {\r\n      // TODO probably want an option to add metadata if geojson\r\n      // need to clear our metadata path or it will give errors trying to find it\r\n      layerConfig.metadataAccessPath = {\r\n        en: '',\r\n        fr: '',\r\n      };\r\n    }\r\n    if (layerType === GEOCORE) {\r\n      delete layerConfig.metadataAccessPath;\r\n    }\r\n    if (valid) {\r\n      // TODO issue #668 - geocore layers do not have same ID, it is impossible to use the added event\r\n      // workaround - close after 3 sec\r\n      if (layerType === GEOCORE) {\r\n        setTimeout(() => {\r\n          setIsLoading(false);\r\n          setAddLayerVisible(false);\r\n        }, 3000);\r\n      }\r\n      api.map(mapId).layer.addGeoviewLayer(layerConfig);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Back' button in the Stepper UI\r\n   */\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\r\n  };\r\n\r\n  /**\r\n   * Set layer URL from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleInput = (event: Event) => {\r\n    setLayerURL(event.target.value.trim());\r\n    setLayerType('');\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set layerType from form input\r\n   *\r\n   * @param {SelectChangeEvent} event TextField event\r\n   */\r\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\r\n    setLayerType(event.target.value as TypeGeoviewLayerType);\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set the currently selected layer from a list\r\n   *\r\n   * @param event Select event\r\n   * @param newValue value/label pairs of select options\r\n   */\r\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\r\n    if (isMultiple()) {\r\n      setLayerEntries(\r\n        newValue.map((x: string) => {\r\n          return { layerId: `${x[0]}` };\r\n        })\r\n      );\r\n      setLayerName(newValue.map((x) => x[1]).join(', '));\r\n    } else {\r\n      setLayerEntries([{ layerId: `${newValue[0]}` }]);\r\n      setLayerName(newValue[1]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the layer name from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleNameLayer = (event: Event) => {\r\n    setLayerName(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Creates a set of Continue / Back buttons\r\n   *\r\n   * @param param0 specify if button is first or last in the list\r\n   * @returns {JSX.Element} React component\r\n   */\r\n  // eslint-disable-next-line react/no-unstable-nested-components\r\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\r\n    return isLoading ? (\r\n      <Box sx={{ padding: 10 }}>\r\n        <CircularProgressBase />\r\n      </Box>\r\n    ) : (\r\n      <ButtonGroup sx={sxClasses.buttonGroup}>\r\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\r\n          {isLast ? 'Finish' : 'Continue'}\r\n        </Button>\r\n        {!isFirst && (\r\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\r\n            Back\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stepper\r\n      activeStep={activeStep}\r\n      orientation=\"vertical\"\r\n      steps={[\r\n        {\r\n          stepLabel: {\r\n            children: 'Enter URL / UUID',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} multiline />\r\n                <br />\r\n                <NavButtons isFirst handleNext={handleStep1} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Select format',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"service-type-label\"\r\n                  value={layerType}\r\n                  onChange={handleSelectType}\r\n                  label=\"Service Type\"\r\n                  inputLabel={{\r\n                    id: 'service-type-label',\r\n                  }}\r\n                  menuItems={layerOptions.map(([value, label]) => ({\r\n                    key: value,\r\n                    item: {\r\n                      value,\r\n                      children: label,\r\n                    },\r\n                  }))}\r\n                />\r\n                <NavButtons handleNext={handleStep2} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Configure layer',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                {layerList.length === 0 && <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />}\r\n                {layerList.length > 1 && (\r\n                  <Autocomplete\r\n                    fullWidth\r\n                    multiple={isMultiple()}\r\n                    disableCloseOnSelect\r\n                    disableClearable={!isMultiple()}\r\n                    id=\"service-layer-label\"\r\n                    options={layerList}\r\n                    getOptionLabel={(option) => `${option[1]} (${option[0]})`}\r\n                    renderOption={(props, option) => <span {...props}>{option[1]}</span>}\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    onChange={handleSelectLayer as any}\r\n                    renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\r\n                  />\r\n                )}\r\n                <br />\r\n                <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        isMultiple()\r\n          ? {\r\n              stepLabel: {\r\n                children: 'Enter Name',\r\n              },\r\n              stepContent: {\r\n                children: (\r\n                  <>\r\n                    <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\r\n                    <br />\r\n                    <NavButtons isLast handleNext={handleStepLast} />\r\n                  </>\r\n                ),\r\n              },\r\n            }\r\n          : null,\r\n      ]}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LayerStepper;\r\n","import { toJsonObject, TypeJsonObject, TypeWindow, TypeButtonPanel } from 'geoview-core';\r\n\r\nimport LayerStepper from './layer-stepper';\r\n\r\ntype TypePanelContentProps = {\r\n  buttonPanel: TypeButtonPanel;\r\n  mapId: string;\r\n};\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @param {TypePanelContentProps} props the properties of the pane content\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\r\n  const { mapId, buttonPanel } = props;\r\n\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n  const { useState, useEffect } = react;\r\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\r\n  const [mapLayers, setMapLayers] = useState({});\r\n  const { Typography, IconButton, AddIcon, Box } = ui.elements;\r\n\r\n  const { displayLanguage } = api.map(mapId!);\r\n\r\n  const translations: TypeJsonObject = toJsonObject({\r\n    en: {\r\n      addLayer: 'Add Layer',\r\n    },\r\n    fr: {\r\n      addLayer: 'Ajouter Couche',\r\n    },\r\n  });\r\n\r\n  const sxClasses = {\r\n    mainContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: 'inherit',\r\n    },\r\n    topControls: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n    },\r\n    addLayerSection: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginTop: 'auto',\r\n      justifyContent: 'end',\r\n    },\r\n  };\r\n\r\n  const onClick = () => setAddLayerVisible((state: boolean) => !state);\r\n\r\n  const Legend = api.map(mapId!).legend.createLegend();\r\n\r\n  useEffect(() => {\r\n    setMapLayers(() => ({ ...api.map(mapId!).layer.geoviewLayers }));\r\n    api.event.on(\r\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\r\n      () => {\r\n        setAddLayerVisible(false);\r\n      },\r\n      mapId,\r\n      buttonPanel.buttonPanelId\r\n    );\r\n\r\n    return () => {\r\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.buttonPanelId);\r\n    };\r\n  }, [api, buttonPanel.buttonPanelId, mapId]);\r\n\r\n  return (\r\n    <Box sx={sxClasses.mainContainer}>\r\n      {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\r\n      {/* <Box sx={sxClasses.topControls} style={{ display: addLayerVisible ? 'none' : 'flex' }}>\r\n        <div>Expand All</div>\r\n        <div>Hide All</div>\r\n      </Box> */}\r\n      <div style={{ display: addLayerVisible ? 'none' : 'block' }}>\r\n        <Legend />\r\n      </div>\r\n      <Box sx={sxClasses.addLayerSection} onClick={onClick}>\r\n        <Typography>{translations[displayLanguage].addLayer}</Typography>\r\n        <IconButton>\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PanelContent;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPlugin,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\nimport PanelContent from './panel-content';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-layers-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass LayersPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations: TypeJsonObject = toJsonObject({\r\n    en: {\r\n      layersPanel: 'Layers',\r\n    },\r\n    fr: {\r\n      layersPanel: 'Couches',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { LayersOutlinedIcon } = ui.elements;\r\n    const { displayLanguage } = api.map(mapId);\r\n\r\n    let panelStatus = false;\r\n\r\n    panelStatus = this.configObj?.isOpen?.large as boolean;\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      id: 'layersPanelButton',\r\n      tooltip: this.translations[displayLanguage].layersPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <LayersOutlinedIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].layersPanel,\r\n      icon: '<i class=\"material-icons\">layers</i>',\r\n      width: 200,\r\n      status: panelStatus,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LayersPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['layers-panel'] = Cast<AbstractPlugin>(LayersPanelPlugin);\r\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","GEOCORE","useState","elements","Select","Stepper","TextField","Button","ButtonGroup","Autocomplete","CircularProgressBase","Box","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","isLoading","setIsLoading","sxClasses","buttonGroup","paddingTop","gap","isMultiple","layerOptions","esriOptions","type","err","capability","emitErrorEmpty","textField","event","emit","snackbarMessagePayload","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","value","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","projection","projections","map","currentProjection","getCode","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","aLayer","Name","Title","length","layerId","message","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","split","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","id","title","geocoreValidation","indexOf","replaceAll","esriValidation","getESRIServiceMetadata","esri","capabilities","name","xyzValidation","tiles","i","dataAccessPath","source","en","fr","geoJSONValidation","pop","replace","handleStep2","valid","undefined","handleStepLast","geoviewLayerId","generateId","on","LAYER","EVENT_LAYER_ADDED","off","url","getMapServerUrl","layerConfig","geoviewLayerName","geoviewLayerType","metadataAccessPath","listOfLayerEntryConfig","setTimeout","layer","addGeoviewLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","sx","padding","variant","onClick","orientation","steps","stepLabel","children","stepContent","width","label","onChange","trim","multiline","layerTokens","toUpperCase","parseInt","endsWith","Number","isNaN","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","renderInput","params","buttonPanel","useEffect","addLayerVisible","setMapLayers","Typography","IconButton","AddIcon","displayLanguage","translations","toJsonObject","addLayer","mainContainer","display","flexDirection","height","topControls","justifyContent","addLayerSection","alignItems","marginTop","Legend","legend","createLegend","geoviewLayers","PANEL","EVENT_PANEL_CLOSE","buttonPanelId","style","state","LayersPanelPlugin","pluginId","schema","defaultConfig","layersPanel","panelStatus","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","tooltip","tooltipPlacement","visible","panel","icon","status","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}