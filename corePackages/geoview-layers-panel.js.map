{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport {\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonArray,\r\n  TypeEsriDynamicLayerEntryConfig,\r\n  TypeWmsLayerEntryConfig,\r\n  TypeWMSLayerConfig,\r\n  TypeGeoviewLayerConfig,\r\n  TypeGeoviewLayerType,\r\n  SelectChangeEvent,\r\n  snackbarMessagePayload,\r\n  ButtonPropsLayerPanel,\r\n} from 'geoview-core';\r\n\r\ntype Event = { target: { value: string } };\r\n\r\ninterface Props {\r\n  mapId: string;\r\n  setAddLayerVisible: (isVisible: boolean) => void;\r\n}\r\n\r\ntype EsriOptions = {\r\n  err: string;\r\n  capability: string;\r\n};\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n\r\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES } = api.layerTypes;\r\n  const { useState } = react;\r\n  const { Select, Stepper, TextField, Button, ButtonGroup, Typography, Autocomplete } = ui.elements;\r\n\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [layerURL, setLayerURL] = useState('');\r\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\r\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\r\n  const [layerName, setLayerName] = useState('');\r\n  const [layerEntries, setLayerEntries] = useState<(TypeEsriDynamicLayerEntryConfig | TypeWMSLayerConfig)[]>([]);\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    buttonGroup: {\r\n      paddingTop: 12,\r\n      gap: 6,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const isMultiple = () => layerType === ESRI_DYNAMIC;\r\n\r\n  /**\r\n   * List of layer types and labels\r\n   */\r\n  const layerOptions = [\r\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\r\n    [ESRI_FEATURE, 'ESRI Feature Service'],\r\n    [GEOJSON, 'GeoJSON'],\r\n    [WMS, 'OGC Web Map Service (WMS)'],\r\n    [WFS, 'OGC Web Feature Service (WFS)'],\r\n    [OGC_FEATURE, 'OGC API Features'],\r\n    [XYZ_TILES, 'XYZ Raster Tiles'],\r\n  ];\r\n\r\n  /**\r\n   * Returns the appropriate error config for ESRI layer types\r\n   *\r\n   * @param type one of esriDynamic or esriFeature\r\n   * @returns {EsriOptions} an error configuration object for populating dialogues\r\n   */\r\n  const esriOptions = (type: string): EsriOptions => {\r\n    switch (type) {\r\n      case ESRI_DYNAMIC:\r\n        return { err: 'ESRI Map', capability: 'Map' };\r\n      case ESRI_FEATURE:\r\n        return { err: 'ESRI Feature', capability: 'Query' };\r\n      default:\r\n        return { err: '', capability: '' };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Emits an error dialogue when a text field is empty\r\n   *\r\n   * @param textField label for the TextField input that cannot be empty\r\n   */\r\n  const emitErrorEmpty = (textField: string) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${textField} cannot be empty`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when the URL does not support the selected service type\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   */\r\n  const emitErrorServer = (serviceName: string) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `URL is not a valid ${serviceName} Server`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when a service does not support the current map projection\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   * @param proj current map projection\r\n   */\r\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WMS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wmsValidation = async (): Promise<boolean> => {\r\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\r\n    let supportedProj: string[] = [];\r\n    try {\r\n      const wms = await api.geoUtilities.getWMSServiceMetadata(layerURL, '');\r\n      supportedProj = wms.Capability.Layer.CRS as string[];\r\n      if (!supportedProj.includes(proj)) throw new Error('proj');\r\n      const layers = (wms.Capability.Layer.Layer as TypeJsonArray).map((aLayer) => [aLayer.Name, aLayer.Title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n            geoviewLayerType: 'ogcWms',\r\n            listOfLayerEntryConfig: [],\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      if (err === 'proj') emitErrorProj('WMS', proj, supportedProj);\r\n      else emitErrorServer('WMS');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WFS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wfsValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\r\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\r\n        toJsonObject((aFeatureType.Name['#text'] as string).split(':')[1]),\r\n        aFeatureType.Title['#text'],\r\n      ]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n            geoviewLayerType: 'ogcWms',\r\n            listOfLayerEntryConfig: [],\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      emitErrorServer('WFS');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid OGC API.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const ogcFeatureValidation = async (): Promise<boolean> => {\r\n    const keys = ['collections', 'links'];\r\n    try {\r\n      const response = await fetch(`${layerURL}/collections?f=json`);\r\n      const json = await response.json();\r\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\r\n      if (!isValid) throw new Error('err');\r\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            layerId: layers[0][0] as string,\r\n            geoviewLayerType: 'ogcWms',\r\n            listOfLayerEntryConfig: [],\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      emitErrorServer('OGC API Feature');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const esriValidation = async (type: string): Promise<boolean> => {\r\n    try {\r\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\r\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\r\n        if ('layers' in esri) {\r\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\r\n\r\n          if (layers.length === 1) {\r\n            setLayerName(layers[0][1] as string);\r\n            setLayerEntries([\r\n              {\r\n                layerId: layers[0][0] as string,\r\n                geoviewLayerType: 'ogcWms',\r\n                listOfLayerEntryConfig: [],\r\n              },\r\n            ]);\r\n          } else setLayerList(layers);\r\n        } else {\r\n          setLayerName(esri.name as string);\r\n          setLayerEntries([\r\n            {\r\n              layerId: esri.id as string,\r\n              geoviewLayerType: 'ogcWms',\r\n              listOfLayerEntryConfig: [],\r\n            },\r\n          ]);\r\n        }\r\n      } else {\r\n        throw new Error('err');\r\n      }\r\n    } catch (err) {\r\n      emitErrorServer(esriOptions(type).err);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\r\n   *\r\n   * @returns {boolean} True if layer passes validation\r\n   */\r\n  const xyzValidation = (): boolean => {\r\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\r\n    const tiles = ['{x}', '{y}', '{z}'];\r\n    for (let i = 0; i < tiles.length; i += 1) {\r\n      if (!layerURL.includes(tiles[i])) {\r\n        emitErrorServer('XYZ Tile');\r\n        return false;\r\n      }\r\n    }\r\n    if (proj !== 'EPSG:3857') {\r\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const geoJSONValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(layerURL);\r\n      const json = await response.json();\r\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) throw new Error('err');\r\n    } catch (err) {\r\n      emitErrorServer('GeoJSON');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep1 = () => {\r\n    let valid = true;\r\n    if (layerURL.trim() === '') {\r\n      valid = false;\r\n      emitErrorEmpty('URL');\r\n    }\r\n    if (valid) setActiveStep(1);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep2 = async () => {\r\n    let valid = true;\r\n    if (layerType === undefined) {\r\n      valid = false;\r\n      emitErrorEmpty('Service Type');\r\n    }\r\n    if (layerType === WMS) valid = await wmsValidation();\r\n    if (layerType === WFS) valid = await wfsValidation();\r\n    if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\r\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\r\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\r\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\r\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\r\n    if (valid) setActiveStep(2);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStep3 = () => {\r\n    let valid = true;\r\n    if (layerEntries.length === 0) {\r\n      valid = false;\r\n      emitErrorEmpty('Layer');\r\n    }\r\n    if (valid) setActiveStep(3);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStepLast = () => {\r\n    let valid = true;\r\n    const name = layerName;\r\n    let url = layerURL;\r\n    let entries = layerEntries;\r\n    // if (Array.isArray(entries)) entries = entries.join(',');\r\n    if (layerType === ESRI_DYNAMIC) url = api.geoUtilities.getMapServerUrl(layerURL);\r\n    else if (layerType === ESRI_FEATURE) {\r\n      url = `${api.geoUtilities.getMapServerUrl(layerURL)}/${(layerEntries as TypeEsriDynamicLayerEntryConfig[])[0].layerId}`;\r\n      entries = [];\r\n    }\r\n\r\n    if (layerName === '') {\r\n      valid = false;\r\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\r\n    }\r\n    const layerConfig: TypeGeoviewLayerConfig = {\r\n      layerId: api.generateId(),\r\n      layerName: {\r\n        en: name,\r\n        fr: name,\r\n      },\r\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\r\n      metadataAccessPath: {\r\n        en: url,\r\n        fr: url,\r\n      },\r\n      listOfLayerEntryConfig: entries,\r\n    };\r\n    if (valid) {\r\n      api.map(mapId).layer.addLayer(layerConfig);\r\n      setAddLayerVisible(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Back' button in the Stepper UI\r\n   */\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\r\n  };\r\n\r\n  /**\r\n   * Set layer URL from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleInput = (event: Event) => {\r\n    setLayerURL(event.target.value);\r\n    setLayerType('');\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set layerType from form input\r\n   *\r\n   * @param {SelectChangeEvent} event TextField event\r\n   */\r\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\r\n    setLayerType(event.target.value as TypeGeoviewLayerType);\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set the currently selected layer from a list\r\n   *\r\n   * @param event Select event\r\n   * @param newValue value/label pairs of select options\r\n   */\r\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\r\n    if (isMultiple()) {\r\n      setLayerEntries(\r\n        newValue.map((x: string) => {\r\n          if (layerType === ESRI_DYNAMIC) {\r\n            return {\r\n              layerId: x,\r\n            } as TypeEsriDynamicLayerEntryConfig;\r\n          }\r\n\r\n          return {\r\n            layerId: x[0] as string,\r\n          } as TypeWmsLayerEntryConfig;\r\n        })\r\n      );\r\n      setLayerName(newValue.map((x) => x[1]).join(', '));\r\n    } else {\r\n      if (layerType === ESRI_DYNAMIC) {\r\n        setLayerEntries([\r\n          {\r\n            layerId: newValue[0],\r\n          } as TypeEsriDynamicLayerEntryConfig,\r\n        ]);\r\n      } else {\r\n        setLayerEntries([\r\n          {\r\n            layerId: newValue[0],\r\n          } as TypeWmsLayerEntryConfig,\r\n        ]);\r\n      }\r\n      setLayerName(newValue[1]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the layer name from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleNameLayer = (event: Event) => {\r\n    setLayerName(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Creates a set of Continue / Back buttons\r\n   *\r\n   * @param param0 specify if button is first or last in the list\r\n   * @returns {JSX.Element} React component\r\n   */\r\n  // eslint-disable-next-line react/no-unstable-nested-components\r\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\r\n    return (\r\n      <ButtonGroup className={classes.buttonGroup}>\r\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\r\n          {isLast ? 'Finish' : 'Continue'}\r\n        </Button>\r\n        {!isFirst && (\r\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\r\n            Back\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stepper\r\n      activeStep={activeStep}\r\n      orientation=\"vertical\"\r\n      steps={[\r\n        {\r\n          stepLabel: {\r\n            children: 'Enter URL',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} />\r\n                <br />\r\n                <NavButtons isFirst handleNext={handleStep1} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Select format',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"service-type-label\"\r\n                  value={layerType}\r\n                  onChange={handleSelectType}\r\n                  label=\"Service Type\"\r\n                  inputLabel={{\r\n                    id: 'service-type-label',\r\n                  }}\r\n                  menuItems={layerOptions.map(([value, label]) => ({\r\n                    key: value,\r\n                    item: {\r\n                      value,\r\n                      children: label,\r\n                    },\r\n                  }))}\r\n                />\r\n                <NavButtons handleNext={handleStep2} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Configure layer',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                {layerList.length === 0 && layerEntries.length === 0 && (\r\n                  <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\r\n                )}\r\n                {layerList.length === 0 && layerEntries.length > 0 && <Typography>{layerName}</Typography>}\r\n                {layerList.length > 1 && (\r\n                  <Autocomplete\r\n                    fullWidth\r\n                    multiple={isMultiple()}\r\n                    disableCloseOnSelect\r\n                    disableClearable={!isMultiple()}\r\n                    id=\"service-layer-label\"\r\n                    options={layerList}\r\n                    getOptionLabel={(option) => `${option[1]} (${option[0]})`}\r\n                    renderOption={(props, option) => <span {...props}>{option[1]}</span>}\r\n                    // value={\r\n                    //   layerType === ESRI_DYNAMIC\r\n                    //     ? layerEntries.map((entry) => {\r\n                    //         return (entry as TypeDynamicLayerEntry).index.toString();\r\n                    //       })\r\n                    //     : layerEntries.map((entry) => {\r\n                    //         return (entry as TypeOgcLayerEntry).id;\r\n                    //       })\r\n                    // }\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    onChange={handleSelectLayer as any}\r\n                    renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\r\n                  />\r\n                )}\r\n                <br />\r\n                <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        isMultiple()\r\n          ? {\r\n              stepLabel: {\r\n                children: 'Enter Name',\r\n              },\r\n              stepContent: {\r\n                children: (\r\n                  <>\r\n                    <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\r\n                    <br />\r\n                    <NavButtons isLast handleNext={handleStepLast} />\r\n                  </>\r\n                ),\r\n              },\r\n            }\r\n          : null,\r\n      ]}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LayerStepper;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport {\r\n  TypeJsonValue,\r\n  TypeJsonArray,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  AbstractGeoViewLayer,\r\n  TypeWindow,\r\n  geoviewLayerIsWMS,\r\n  geoviewLayerIsEsriDynamic,\r\n  geoviewLayerIsEsriFeature,\r\n  getLocalizedValue,\r\n} from 'geoview-core';\r\n\r\n/**\r\n * interface for the layers list properties in layers panel\r\n */\r\ntype TypeLayersPanelListProps = {\r\n  mapId: string;\r\n  layers: Record<string, AbstractGeoViewLayer>;\r\n  displayLanguage: string;\r\n};\r\n\r\ntype TypeLegend =\r\n  | TypeJsonValue[]\r\n  | {\r\n      name: string;\r\n      dataUrl: string[] | string | ArrayBuffer | null;\r\n    }[];\r\n\r\ntype TypeSubLayerVisibility = { [id: string]: number[] };\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will list the map server layers defined in the map config\r\n * @param {TypeLayersPanelListProps} props properties passed to the component\r\n * @returns {JSX.Element} a React JSX Element containing map server layers\r\n */\r\nfunction LayersList(props: TypeLayersPanelListProps): JSX.Element {\r\n  const { mapId, layers, displayLanguage } = props;\r\n\r\n  const { cgpv } = w;\r\n  const { ui, react, api } = cgpv;\r\n  const { useState, useEffect } = react;\r\n\r\n  const [selectedLayer, setSelectedLayer] = useState<string>('');\r\n  const [layerLegend, setLayerLegend] = useState<{ [id: string]: TypeLegend }>({});\r\n  const [layerBounds, setLayerBounds] = useState<Record<string, number[]>>({});\r\n  const [layerBbox, setLayerBbox] = useState<number[][]>([]);\r\n  const [layerOpacity, setLayerOpacity] = useState<Record<string, number>>({});\r\n  const [layerVisibility, setLayerVisibility] = useState<Record<string, boolean>>({});\r\n  const [subLayerVisibility, setSubLayerVisibility] = useState<TypeSubLayerVisibility>({});\r\n\r\n  const { Button, Slider, Tooltip, Checkbox } = ui.elements;\r\n\r\n  const translations: TypeJsonObject = toJsonObject({\r\n    'en': {\r\n      bounds: 'Toggle Bounds',\r\n      zoom: 'Zoom to Layer',\r\n      remove: 'Remove Layer',\r\n      opacity: 'Adjust Opacity',\r\n      visibility: 'Toggle Visibility',\r\n    },\r\n    'fr': {\r\n      bounds: 'Basculer la limite',\r\n      zoom: 'Zoom sur la Couche',\r\n      remove: 'Supprimer la Couche',\r\n      opacity: \"Ajuster l'opacité\",\r\n      visibility: 'Basculer la Visibilité',\r\n    },\r\n  });\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    layersContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    layerItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n      border: 'none',\r\n      width: '100%',\r\n    },\r\n    layerParentText: {\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerCountTextContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n      height: '32px',\r\n    },\r\n    layerItemText: {\r\n      fontSize: '14px',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n      marginLeft: '10px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: 6,\r\n    },\r\n    flexGroup: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      alignItems: 'baseline',\r\n      gap: 12,\r\n    },\r\n    flexGroupButton: {\r\n      height: 38,\r\n      minHeight: 38,\r\n      width: 25,\r\n      minWidth: 25,\r\n      '& > div': {\r\n        textAlign: 'center',\r\n      },\r\n    },\r\n    slider: {\r\n      width: '100%',\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n    },\r\n    legendSubLayerGroup: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n  }));\r\n\r\n  /**\r\n   * Calls setLayerLegend for all layers\r\n   */\r\n  const setLayerLegendAll = () =>\r\n    Object.values(layers).forEach(async (layer) => {\r\n      if (geoviewLayerIsWMS(layer)) {\r\n        const dataUrl = await layer.getLegendGraphic();\r\n        const name = getLocalizedValue(layer.metadataAccessPath, layer.mapId)!.includes('/MapServer') ? layer.layerName : '';\r\n        const legend = [{ name, dataUrl }];\r\n        setLayerLegend((state) => ({ ...state, [layer.layerId]: legend }));\r\n      } else if (geoviewLayerIsEsriDynamic(layer) || geoviewLayerIsEsriFeature(layer)) {\r\n        const legend = await layer.getLegendJson();\r\n        const legendArray = Array.isArray(legend) ? legend : [legend];\r\n        setLayerLegend((state) => ({ ...state, [layer.layerId]: legendArray }));\r\n      }\r\n    });\r\n\r\n  /**\r\n   * Calls setLayerExtent for all layers\r\n   */\r\n  const setLayerBoundsAll = async () => {\r\n    for (let layerIndex = 0; layerIndex < Object.keys(layers).length; layerIndex++) {\r\n      const layerKey = Object.keys(layers)[layerIndex];\r\n      const layerValue = layers[layerKey];\r\n\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const bounds = await layerValue.getBounds();\r\n      setLayerBounds((state) => ({ ...state, [layerValue.id]: bounds }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const defaultLegends = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: [] }), {});\r\n    setLayerLegend((state) => ({ ...defaultLegends, ...state }));\r\n    setLayerLegendAll();\r\n\r\n    const defaultBounds = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: [] }), {});\r\n    setLayerBounds((state) => ({ ...defaultBounds, ...state }));\r\n    setLayerBoundsAll();\r\n\r\n    const defaultSliders = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: 100 }), {});\r\n    setLayerOpacity((state) => ({ ...defaultSliders, ...state }));\r\n\r\n    const defaultVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: true }), {});\r\n    setLayerVisibility((state) => ({ ...defaultVisibility, ...state }));\r\n\r\n    const defaultSubVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: curr.entries }), {});\r\n    setSubLayerVisibility((state) => ({ ...defaultSubVisibility, ...state }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [layers]);\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Sets the currently selected layer,\r\n   * sets to blank if value is same as currently selecetd layer\r\n   *\r\n   * @param value layer button value\r\n   */\r\n  const onClick = (value: string) => {\r\n    const selected = value !== selectedLayer ? value : '';\r\n    setSelectedLayer(selected);\r\n  };\r\n\r\n  /**\r\n   * Removes selcted layer from map\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onZoom = (layer: AbstractGeoViewLayer) => api.map(mapId).fitBounds(layerBounds[layer.id]);\r\n\r\n  /**\r\n   * Returns polygon with segmented top and bottom to handle curved projection\r\n   *\r\n   * @param {number[]} bounds layer bounds\r\n   * @param {number} segments layer bounds\r\n   * @returns {number[][]} the bounding box coordinates\r\n   */\r\n  const polygonFromBounds = (bounds: number[], segments = 100): number[][] => {\r\n    // store longitude and latitude of each point of polygon\r\n    const lnglats: number[][] = [];\r\n\r\n    if (bounds && bounds.length > 0) {\r\n      const west = bounds[0];\r\n      const south = bounds[1];\r\n      const east = bounds[2];\r\n      const north = bounds[3];\r\n\r\n      const southEast = [east, south];\r\n      const southWest = [west, south];\r\n      const northEast = [east, north];\r\n      const northWest = [west, north];\r\n\r\n      const width = east - west;\r\n\r\n      lnglats.push(southWest);\r\n      for (let i = 1; i <= segments; i += 1) {\r\n        const segmentWidth = width * (i / (segments + 1));\r\n        const lat = west + segmentWidth;\r\n        lnglats.push([lat, south]);\r\n      }\r\n      lnglats.push(southEast);\r\n      lnglats.push(northEast);\r\n      for (let i = 1; i <= segments; i += 1) {\r\n        const segmentWidth = width * (i / (segments + 1));\r\n        const lat = east - segmentWidth;\r\n        lnglats.push([lat, north]);\r\n      }\r\n      lnglats.push(northWest);\r\n    }\r\n\r\n    return lnglats;\r\n  };\r\n\r\n  /**\r\n   * Adds bounding box to map\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onBounds = (layer: AbstractGeoViewLayer) => {\r\n    const bbox = polygonFromBounds(layerBounds[layer.id]);\r\n\r\n    if (layerBbox.toString() === bbox.toString()) {\r\n      api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\r\n      setLayerBbox([]);\r\n    } else {\r\n      api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\r\n      api.map(mapId).layer.vector?.addPolygon(\r\n        [bbox],\r\n        {\r\n          style: {\r\n            strokeColor: 'red',\r\n            fillColor: 'red',\r\n            fillOpacity: 0.2,\r\n          },\r\n        },\r\n        'layerBoundingBox'\r\n      );\r\n      setLayerBbox(bbox);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes selcted layer from map, also removing bbox if active\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onRemove = (layer: AbstractGeoViewLayer) => {\r\n    // empty bounding box\r\n    setLayerBbox([]);\r\n    // remove bounding box layer from map\r\n    api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\r\n    // remove layer from map\r\n    api.map(mapId).layer.removeLayer(layer);\r\n  };\r\n\r\n  /**\r\n   * Adjusts layer opacity when slider is moved\r\n   *\r\n   * @param value slider opacity value (0-100)\r\n   * @param data Layer data\r\n   */\r\n  const onSliderChange = (value: number, data: AbstractGeoViewLayer) => {\r\n    setLayerOpacity((state) => ({ ...state, [data.id]: value }));\r\n    const opacity = layerVisibility[data.id] ? value / 100 : 0;\r\n    data.setOpacity(opacity);\r\n  };\r\n\r\n  /**\r\n   * Adjusts layer visibility when checkbox is toggled\r\n   *\r\n   * @param value checkbox boolean\r\n   * @param data Layer data\r\n   */\r\n  const onVisibilityChange = (value: boolean, data: AbstractGeoViewLayer) => {\r\n    setLayerVisibility((state) => ({ ...state, [data.id]: value }));\r\n    const opacity = value ? layerOpacity[data.id] / 100 : 0;\r\n    data.setOpacity(opacity);\r\n    if (value && data.setEntries) {\r\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: data.entries as number[] }));\r\n      data.setEntries(data.entries as number[]);\r\n    }\r\n    if (!value && data.setEntries) {\r\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: [] }));\r\n      data.setEntries([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adjusts sublayer visibility when checkbox is toggled\r\n   *\r\n   * @param value checkbox boolean\r\n   * @param data Layer data\r\n   * @param id sublayer ID\r\n   */\r\n  const onSubVisibilityChange = (value: boolean, data: AbstractGeoViewLayer, id: number) => {\r\n    const oldEntries = subLayerVisibility[data.id];\r\n    const entries = value ? [...new Set([...oldEntries, id])] : oldEntries.filter((x) => x !== id);\r\n    if (oldEntries.length === 0) {\r\n      setLayerVisibility((state) => ({ ...state, [data.id]: true }));\r\n      data.setOpacity(layerOpacity[data.id] / 100);\r\n    }\r\n    if (entries.length === 0) {\r\n      setLayerVisibility((state) => ({ ...state, [data.id]: false }));\r\n      data.setOpacity(0);\r\n    }\r\n    setSubLayerVisibility((state) => ({ ...state, [data.id]: entries }));\r\n    if (data.setEntries) data.setEntries(entries);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.layersContainer}>\r\n      {Object.values(layers).map((layer) => (\r\n        <div key={layer.id}>\r\n          <button type=\"button\" className={classes.layerItem} onClick={() => onClick(layer.id)}>\r\n            <div className={classes.layerCountTextContainer}>\r\n              <div className={classes.layerItemText} title={layer.name}>\r\n                {layer.name}\r\n              </div>\r\n            </div>\r\n          </button>\r\n          {selectedLayer === layer.id && (\r\n            <>\r\n              <div className={classes.flexGroup}>\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[displayLanguage].zoom as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">zoom_in</i>'\r\n                  onClick={() => onZoom(layer)}\r\n                />\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[displayLanguage].bounds as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">crop_free</i>'\r\n                  onClick={() => onBounds(layer)}\r\n                />\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[displayLanguage].remove as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">remove</i>'\r\n                  onClick={() => onRemove(layer)}\r\n                />\r\n              </div>\r\n              <div className={classes.flexGroup}>\r\n                <Tooltip title={translations[displayLanguage].opacity}>\r\n                  <i className=\"material-icons\">contrast</i>\r\n                </Tooltip>\r\n                <div className={classes.slider}>\r\n                  <Slider\r\n                    id={api.generateId()}\r\n                    min={0}\r\n                    max={100}\r\n                    size=\"small\"\r\n                    value={layerOpacity[layer.id]}\r\n                    valueLabelDisplay=\"auto\"\r\n                    customOnChange={(value) => onSliderChange(value as number, layer)}\r\n                  />\r\n                </div>\r\n                <Tooltip title={translations[displayLanguage].visibility}>\r\n                  <Checkbox checked={layerVisibility[layer.id]} onChange={(e) => onVisibilityChange(e.target.checked, layer)} />\r\n                </Tooltip>\r\n              </div>\r\n              {(layerLegend[layer.id] as TypeJsonArray).map((subLayer, index: number) => (\r\n                <div key={index}>\r\n                  {subLayer!.legend && (\r\n                    <div className={classes.legendSubLayerGroup}>\r\n                      <div className={classes.layerItemText} title={subLayer.layerName as string}>\r\n                        {subLayer.layerName}\r\n                      </div>\r\n                      <Tooltip title={translations[displayLanguage].visibility}>\r\n                        <Checkbox\r\n                          checked={subLayerVisibility[layer.id].includes(subLayer.layerId as number)}\r\n                          onChange={(e) => onSubVisibilityChange(e.target.checked, layer, subLayer.layerId as number)}\r\n                        />\r\n                      </Tooltip>\r\n                    </div>\r\n                  )}\r\n                  {(subLayer.drawingInfo?.renderer.type as string) === 'simple' && subLayer.drawingInfo?.renderer.symbol.imageData && (\r\n                    <div className={classes.layerItemText}>\r\n                      <img\r\n                        alt=\"Layer Legend\"\r\n                        src={`data:${subLayer.drawingInfo?.renderer.symbol.contentType};base64,${subLayer.drawingInfo?.renderer.symbol.imageData}`}\r\n                      />\r\n                      {subLayer.drawingInfo?.renderer.label || subLayer.name}\r\n                    </div>\r\n                  )}\r\n                  {subLayer.drawingInfo?.renderer.type === 'uniqueValue' &&\r\n                    subLayer.drawingInfo.renderer.uniqueValueInfos[0].symbol.imageData &&\r\n                    (subLayer.drawingInfo.renderer.uniqueValueInfos as TypeJsonArray).map((uniqueValue, i: number) => (\r\n                      <div key={i} className={classes.layerItemText}>\r\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.symbol.contentType};base64,${uniqueValue.symbol.imageData}`} />\r\n                        {uniqueValue.label}\r\n                      </div>\r\n                    ))}\r\n                  {subLayer.legend &&\r\n                    (subLayer.legend as TypeJsonArray).map((uniqueValue, i: number) => (\r\n                      <div key={i} className={classes.layerItemText}>\r\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.contentType};base64,${uniqueValue.imageData}`} />\r\n                        {uniqueValue.label || subLayer.layerName}\r\n                      </div>\r\n                    ))}\r\n                  {subLayer.dataUrl && (\r\n                    <div className={classes.layerItemText}>\r\n                      <img alt=\"Layer Legend\" src={subLayer.dataUrl as string} />\r\n                      {subLayer.name}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LayersList;\r\n","import { toJsonObject, TypePanelProps, TypeJsonObject, TypeWindow } from 'geoview-core';\r\n\r\nimport LayerStepper from './layer-stepper';\r\nimport LayersList from './layers-list';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @param {TypePanelContentProps} props the properties of the pane content\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction PanelContent(props: TypePanelProps): JSX.Element {\r\n  const { mapId, buttonPanel } = props;\r\n\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n  const { useState, useEffect } = react;\r\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\r\n  const [mapLayers, setMapLayers] = useState({});\r\n  const { Button } = ui.elements;\r\n\r\n  const { displayLanguage } = api.map(mapId);\r\n\r\n  const translations: TypeJsonObject = toJsonObject({\r\n    'en': {\r\n      addLayer: 'Add Layer',\r\n    },\r\n    'fr': {\r\n      addLayer: 'Ajouter Couche',\r\n    },\r\n  });\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    mainContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n    },\r\n    addLayerButton: {\r\n      width: 50,\r\n      minWidth: 50,\r\n      '& > div': {\r\n        textAlign: 'center',\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const onClick = () => setAddLayerVisible((state: boolean) => !state);\r\n\r\n  useEffect(() => {\r\n    setMapLayers(() => ({ ...api.map(mapId).layer.layers }));\r\n\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\r\n      () =>\r\n        setMapLayers(() => ({\r\n          ...api.map(mapId).layer.layers,\r\n        })),\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\r\n      () =>\r\n        setMapLayers(() => ({\r\n          ...api.map(mapId).layer.layers,\r\n        })),\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\r\n      () => {\r\n        setAddLayerVisible(false);\r\n      },\r\n      mapId,\r\n      buttonPanel.id\r\n    );\r\n\r\n    return () => {\r\n      api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\r\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\r\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.id);\r\n    };\r\n  }, [api, buttonPanel.id, mapId]);\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.mainContainer}>\r\n        <Button\r\n          className={classes.addLayerButton}\r\n          tooltip={translations[displayLanguage].addLayer as string}\r\n          tooltipPlacement=\"right\"\r\n          variant=\"contained\"\r\n          type=\"icon\"\r\n          icon='<i class=\"material-icons\">add</i>'\r\n          onClick={onClick}\r\n        />\r\n      </div>\r\n      {addLayerVisible && <LayerStepper mapId={mapId} setAddLayerVisible={setAddLayerVisible} />}\r\n      <div style={{ display: addLayerVisible ? 'none' : 'inherit' }}>\r\n        <LayersList mapId={mapId} layers={mapLayers} displayLanguage={displayLanguage} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PanelContent;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPlugin,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\nimport PanelContent from './panel-content';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-layers-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass LayersPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations: TypeJsonObject = toJsonObject({\r\n    'en': {\r\n      layersPanel: 'Layers',\r\n    },\r\n    'fr': {\r\n      layersPanel: 'Couches',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { LayersOutlinedIcon } = ui.elements;\r\n    const { displayLanguage } = api.map(mapId);\r\n\r\n    let panelStatus = false;\r\n\r\n    panelStatus = this.configObj?.isOpen?.large as boolean;\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      id: 'layersPanelButton',\r\n      tooltip: this.translations[displayLanguage].layersPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <LayersOutlinedIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].layersPanel,\r\n      icon: '<i class=\"material-icons\">layers</i>',\r\n      width: 200,\r\n      status: panelStatus,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LayersPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['layers-panel'] = Cast<AbstractPlugin>(LayersPanelPlugin);\r\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","useState","elements","Select","Stepper","TextField","Button","ButtonGroup","Typography","Autocomplete","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","classes","makeStyles","buttonGroup","paddingTop","gap","useStyles","isMultiple","layerOptions","esriOptions","type","err","capability","emitErrorEmpty","textField","event","emit","snackbarMessagePayload","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","value","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","projection","projections","map","currentProjection","getCode","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","aLayer","Name","Title","length","layerId","geoviewLayerType","listOfLayerEntryConfig","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","toJsonObject","split","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","id","title","esriValidation","getESRIServiceMetadata","esri","capabilities","name","xyzValidation","tiles","i","geoJSONValidation","handleStep2","valid","undefined","handleStepLast","url","entries","getMapServerUrl","layerConfig","generateId","en","fr","metadataAccessPath","layer","addLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","className","variant","onClick","orientation","steps","stepLabel","children","stepContent","sx","width","label","onChange","trim","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","renderInput","params","displayLanguage","useEffect","selectedLayer","setSelectedLayer","layerLegend","setLayerLegend","layerBounds","setLayerBounds","layerBbox","setLayerBbox","layerOpacity","setLayerOpacity","layerVisibility","setLayerVisibility","subLayerVisibility","setSubLayerVisibility","Slider","Tooltip","Checkbox","translations","bounds","zoom","remove","opacity","visibility","layersContainer","overflow","overflowY","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","height","layerItemText","whiteSpace","textOverflow","marginLeft","flexGroup","flexGroupButton","minHeight","minWidth","textAlign","slider","paddingLeft","paddingRight","legendSubLayerGroup","setLayerBoundsAll","layerIndex","layerKey","layerValue","getBounds","state","defaultLegends","values","reduce","prev","curr","forEach","geoviewLayerIsWMS","getLegendGraphic","dataUrl","getLocalizedValue","legend","geoviewLayerIsEsriDynamic","geoviewLayerIsEsriFeature","getLegendJson","legendArray","Array","isArray","defaultBounds","defaultSliders","defaultVisibility","defaultSubVisibility","tooltip","tooltipPlacement","icon","fitBounds","onZoom","bbox","segments","lnglats","west","south","east","north","southEast","southWest","northEast","northWest","push","lat","polygonFromBounds","toString","vector","deleteGeometry","addPolygon","style","strokeColor","fillColor","fillOpacity","onBounds","removeLayer","onRemove","min","max","size","valueLabelDisplay","customOnChange","data","setOpacity","onSliderChange","checked","e","setEntries","onVisibilityChange","subLayer","index","oldEntries","Set","filter","drawingInfo","renderer","symbol","imageData","alt","src","contentType","uniqueValueInfos","uniqueValue","buttonPanel","addLayerVisible","mapLayers","setMapLayers","mainContainer","flexDirection","addLayerButton","on","LAYER","EVENT_LAYER_ADDED","EVENT_REMOVE_LAYER","PANEL","EVENT_PANEL_CLOSE","off","LayersPanelPlugin","schema","defaultConfig","layersPanel","panelStatus","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","visible","panel","status","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}